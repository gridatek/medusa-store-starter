name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  ci:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Start Docker services
        run: |
          echo "Starting Docker services..."
          docker compose up -d

          echo "Docker services started, checking status..."
          docker compose ps

      - name: Wait for services and verify connection
        run: |
          echo "Waiting for Docker services to be healthy..."
          timeout 120s bash -c 'until [ $(docker compose ps | grep -c "healthy") -eq 2 ]; do
            echo "Waiting for services... Current status:"
            docker compose ps
            sleep 5
          done'

          echo "✅ Services are healthy!"
          echo "Final service status:"
          docker compose ps

          echo "Testing database connection..."
          docker compose exec -T postgres pg_isready -U postgres

          echo "Testing Redis connection..."
          docker compose exec -T redis redis-cli ping

      - name: Setup Backend Environment
        run: |
          cd backend
          cat > .env.development << EOF
          DATABASE_URL=postgres://postgres:postgres@localhost:5432/medusa-store
          REDIS_URL=redis://localhost:6379
          JWT_SECRET=test-secret-${{ github.run_id }}
          COOKIE_SECRET=test-cookie-secret-${{ github.run_id }}
          NODE_ENV=development
          PORT=9000
          EOF

          echo "✅ Backend .env.development configuration created"

      - name: Build and migrate backend
        run: |
          cd backend

          echo "Current .env.development file:"
          cat .env.development

          echo "Building backend..."
          npm run build

          echo "Running database migrations..."
          npx medusa db:migrate
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/medusa-store
          REDIS_URL: redis://localhost:6379
          NODE_ENV: development

      - name: Seed database
        run: |
          cd backend
          npm run seed || echo "No seed script found, skipping..."
        continue-on-error: true
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/medusa-store
          REDIS_URL: redis://localhost:6379
          NODE_ENV: development

      - name: Create Admin User
        working-directory: ./backend
        run: |
          echo "Creating admin user..."
          npx medusa user -e admin@github-ci.com -p ci-test-password-${{ github.run_id }}
          echo "✅ Admin user created successfully"
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/medusa-store
          REDIS_URL: redis://localhost:6379
          NODE_ENV: development

      - name: Start Medusa backend
        run: |
          cd backend
          npm run start &
          echo $! > ../backend.pid
        env:
          DATABASE_URL: postgres://postgres:postgres@localhost:5432/medusa-store
          REDIS_URL: redis://localhost:6379
          NODE_ENV: development

      - name: Wait for backend to be ready
        run: |
          echo "Waiting for Medusa backend..."
          timeout 120s bash -c 'until curl -f http://localhost:9000/health; do 
            echo "Backend not ready yet, waiting..."
            sleep 3
          done'
          echo "✅ Backend health check passed"

          # Additional wait for admin routes to be ready
          echo "Testing admin auth endpoint availability..."
          timeout 60s bash -c 'until curl -f -s -o /dev/null http://localhost:9000/admin/auth; do 
            echo "Admin routes not ready yet, waiting..."
            sleep 2
          done'
          echo "✅ Admin routes are ready"

      - name: Generate Publishable API Key via Admin API
        working-directory: ./backend
        run: |
          echo "Generating publishable API key via Admin API..."

          # First, authenticate with admin API
          echo "Authenticating admin user..."
          AUTH_RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST http://localhost:9000/admin/auth \
            -H "Content-Type: application/json" \
            -d '{"email": "admin@github-ci.com", "password": "ci-test-password-${{ github.run_id }}"}')

          echo "Auth response: $AUTH_RESPONSE"

          # Check if authentication was successful
          HTTP_CODE=$(echo "$AUTH_RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
          if [ "$HTTP_CODE" != "200" ]; then
            echo "Authentication failed with HTTP code: $HTTP_CODE"
            echo "Full response: $AUTH_RESPONSE"
            exit 1
          fi

          # Extract access token
          ACCESS_TOKEN=$(echo "$AUTH_RESPONSE" | grep -o '"access_token":"[^"]*"' | cut -d'"' -f4)

          if [ -z "$ACCESS_TOKEN" ]; then
            echo "Failed to extract access token from response"
            echo "Full response: $AUTH_RESPONSE"
            exit 1
          fi

          echo "Admin authenticated successfully, token length: ${#ACCESS_TOKEN}"

          # Create publishable API key
          echo "Creating publishable API key..."
          KEY_RESPONSE=$(curl -s -w "\nHTTP_CODE:%{http_code}" -X POST http://localhost:9000/admin/publishable-api-keys \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $ACCESS_TOKEN" \
            -d '{"title": "CI Test Key"}')

          echo "Key creation response: $KEY_RESPONSE"

          # Check if key creation was successful
          HTTP_CODE=$(echo "$KEY_RESPONSE" | grep -o "HTTP_CODE:[0-9]*" | cut -d: -f2)
          if [ "$HTTP_CODE" != "200" ] && [ "$HTTP_CODE" != "201" ]; then
            echo "Key creation failed with HTTP code: $HTTP_CODE"
            echo "Full response: $KEY_RESPONSE"
            exit 1
          fi

          # Extract the publishable key
          PUBLISHABLE_KEY=$(echo "$KEY_RESPONSE" | grep -o '"id":"pk_[^"]*"' | cut -d'"' -f4)

          if [ -z "$PUBLISHABLE_KEY" ]; then
            echo "Failed to extract publishable API key from response"
            echo "Full response: $KEY_RESPONSE"
            exit 1
          fi

          echo "Generated publishable key: $PUBLISHABLE_KEY"
          echo "PUBLISHABLE_API_KEY=$PUBLISHABLE_KEY" >> $GITHUB_ENV

      - name: Create storefront config
        working-directory: ./storefront
        run: |
          echo "Creating environment.json with API key..."

          mkdir -p public/assets/config

          cat > public/assets/config/environment.json << EOF
          {
            "medusaApiUrl": "http://localhost:9000",
            "medusaPublishableApiKey": "${{ env.PUBLISHABLE_API_KEY }}"
          }
          EOF

          echo "✅ Config file created at public/assets/config/environment.json:"
          cat public/assets/config/environment.json

      - name: Build Angular storefront
        run: |
          cd storefront
          npm run build

      - name: Start Angular storefront
        run: |
          cd storefront
          npm run start &
          echo $! > ../storefront.pid
        env:
          NODE_ENV: development

      - name: Wait for storefront to be ready
        run: |
          echo "Waiting for Angular storefront..."
          timeout 120s bash -c 'until curl -f http://localhost:4200; do 
            echo "Storefront not ready yet, waiting..."
            sleep 3
          done'
          echo "✅ Storefront is ready!"

      - name: Install Playwright browsers
        run: |
          cd e2e
          npx playwright install chromium

      - name: Run Playwright tests
        run: |
          cd e2e
          npm run test
        env:
          CI: true

      - name: Upload Playwright report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report
          path: e2e/playwright-report/
          retention-days: 30

      - name: Cleanup processes
        if: always()
        run: |
          if [ -f backend.pid ]; then
            kill $(cat backend.pid) || true
          fi
          if [ -f storefront.pid ]; then
            kill $(cat storefront.pid) || true
          fi
          docker compose down
